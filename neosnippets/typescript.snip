include javascript.snip

#
snippet     interface
abbr        interface NAME {...}
options     head
  interface ${1:#:NAME} {
    ${0:#:TARGET}
  }

snippet     switch
abbr        switch NAME {...}
options     head
  switch ${1:#:NAME} {
    case ${0:#:TARGET}:
    default:
      return null
  }

snippet     enum
abbr        enum NAME {...}
options     head
  enum ${1:#:NAME} {
    ${0:#:TARGET}
  }

# React
snippet ir
	import * as React from 'react'
snippet ird
	import * as ReactDOM from 'react-dom'
snippet cdm
	componentDidMount() {
		${1}
	}
snippet cdup
	componentDidUpdate(prevProps, prevState) {
		${1}
	}
snippet cwm
	componentWillMount() {
		${1}
	}
snippet cwr
	componentWillReceiveProps(nextProps) {
		${1}
	}
snippet cwun
	componentWillUnmount() {
		${1}
	}
snippet cwu
	componentWillUpdate(nextProps, nextState) {
		${1}
	}
snippet fup
	forceUpdate(${1:callback})
snippet dp
	static defaultProps = {
		${1}: ${2},
	}
snippet st
	state = {
		${1}: ${2},
	}
snippet pt
	static propTypes = {
		${1}: React.PropTypes.${2:type},
	}
snippet rcc
	class ${1:ClassName} extends React.PureComponent {

		render() {
			return (
				${0:<div />}
			)
		}

	}
snippet rdr
	ReactDOM.render(${1}, ${2})
snippet ercc
	export default class ${1:ClassName} extends React.PureComponent {

		render() {
			return (
				${0:<div />}
			)
		}

	}
snippet ctor
	constructor() {
		super()
		${1}
	}
snippet ren
	render() {
		return (
			${1:<div />}
		)
	}
snippet sst
	this.setState(() => {
		${1}: ${2}
	})
snippet scu
	shouldComponentUpdate(nextProps, nextState) {
		${1}
	}
snippet prp i
	this.props.${1}
snippet ste i
	this.state.${1}

snippet react
  import * as React from 'react'

	export class ${1:ClassName} extends React.PureComponent {

		render() {
			return (
				${0:<div />}
			)
		}

	}
