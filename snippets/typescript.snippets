snippet c "console.log"
console.log(${0})

# nestjs

snippet module "module"
import { Module } from '@nestjs/common'

import { DummyController } from './dummy.controller'
import { DummyResolver } from './dummy.resolver'
import { DummyService } from './dummy.service'

@Module({
  imports: [],
  providers: [DummyResolver, DummyService],
  controllers: [DummyController],
  exports: [DummyService],
})
export class DummyModule {}


snippet controller "controller"
import { Controller } from '@nestjs/common'
import { ApiTags } from '@nestjs/swagger'

import { DummyService } from './dummy.service'

@ApiTags('Dummy')
@Controller('/api/dummys')
export class DummyController {
  constructor(private readonly dummyService: DummyService) {}
}


snippet service "service"
import { Injectable, Inject } from '@nestjs/common'

import { DummyModel } from './dummy.model'

@Injectable()
export class DummyService {
  constructor(
    @Inject(DummyModel) private readonly Dummy: typeof DummyModel,
  ) {}
}


snippet module "resolver"
import { Resolver } from '@nestjs/graphql'

import { Dummy  } from './dummy.schema'
import { DummyService  } from './dummy.service'

@Resolver(() => Dummy)
export class DummyResolver {
  constructor(
    private readonly dummyService: DummyService
  ) { }
}

snippet module "resolver"
import { UseGuards } from '@nestjs/common'
import { Query, Resolver } from '@nestjs/graphql'
import { JwtGuard } from '@web/nestjs-common'

import { DummyService } from './dummy.service'

@UseGuards(JwtGuard)
@Resolver(() => Dummy)
export class DummyResolver {
  constructor(private readonly dummyService: DummyService) {}

  @Query(() => Boolean)
  async query() {
    return this.dummyService.get()
  }
}
