include javascript.snip

snippet     interface
abbr        interface NAME {...}
options     head
  interface ${1:#:NAME} {
    ${0:#:TARGET}
  }

snippet     switch
abbr        switch NAME {...}
options     head
  switch ${1:#:NAME} {
    case ${0:#:TARGET}:
    default:
      return null
  }

snippet     enum
abbr        enum NAME {...}
options     head
  enum ${1:#:NAME} {
    ${0:#:TARGET}
  }

# React
snippet ir
  import * as React from 'react'
snippet ird
  import * as ReactDOM from 'react-dom'
snippet state
  const [state, setState] = useState({})
snippet effect
  useEffect(() => {
  }, [])
snippet f
  const ${1:FunctionName} = () => {
  }

snippet react
abbr    react NAME {...}
options head
  import * as React from 'react'

  interface ${1:#:NAME}Props {
  }

  export const ${1:#:NAME}: React.FC<${1:#:NAME}Props> = () => {
    return (
      <div>
      </div>
    )
  }

snippet controller
abbr controller NAME {...}
  import { Controller } from '@nestjs/common'
  import { ApiTags } from '@nestjs/swagger'

  import { DummyService } from './dummy.service'

  @ApiTags('Dummy')
  @Controller('/api/dummys')
  export class DummyController {
    constructor(private readonly dummyService: DummyService) {}
  }

snippet service
abbr service NAME {...}
  import { Injectable } from '@nestjs/common'

  @Injectable()
  export class DummyService {
  }

snippet module
abbr module NAME {...}
  import { Module } from '@nestjs/common'

  import { DummyController } from './follow.controller'
  import { DummyService } from './follow.service'

  @Module({
    imports: [],
    providers: [DummyService],
    controllers: [DummyController],
    exports: [DummyService],
  })
  export class DummyModule {}
